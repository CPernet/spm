function [nX,nXnames]=spm_DesMtxSca(varargin)
% Scaling of design matrix portions to lie in [-1,1], for visual display.
% FORMAT [nX,nXnames]=spm_DesMtxSca(X1,X1names,X2,X2names,...);
%
% The arguments come in X,Xnames pairs, where:
% X		- Design matrix, or a portion of one.
% Xnames	- Names of effects represented by the columns of X, as
%                 given by spm_DesMtx [can be omitted]
%
% Xnames parameters can be omitted, the columns of the design matrix 
% portion are then normalised individually.
%
% nX		- Normalised image of the design matrix
% nXnames	- Names of the effects.
%_______________________________________________________________________
%
% Returns a normalised version of the design matrix, with values in the
% interval [-1,1]. This is provided for imaging of design matrices.
% Special care is taken to apply the same normalisation to portions of
% design matrix reflecting a single effect. I.e., the columns of a
% design matrix corresponding to a factor by covariate interaction are
% normalised such that the blocks of zeros are maintained, with the
% remaining covariate values normalised to lie in (0,1]. Identification
% of effects corresponding to columns of design matrix portions is via
% the names matrix generated by spm_DesMtx.
% 
% The following conventions are used to determine the normalisation,
% which depend on the conventions adopted for naming effects in
% spm_DesMtx:
% 
% 	An `-' in the first effect name => Factor by covariate interaction
% 	An `_' in an effect name => a factor (or interaction of factors)
% 
% These characters should therefore be avoided when naming effects to
% spm_DesMtx.
% 
% If an effect is one level of a factor or an interaction, then the
% remaining levels are found, and the block normalised as a whole.
% 
% See also: spm_DesMtx
%
%_______________________________________________________________________
% %W% Andrew Holmes %E%

%-Compute
%=======================================================================
nX   = []; nXnames = '';
Carg = 1;
while(Carg <= nargin)
	X = varargin{Carg}; Carg=Carg+1;
	if Carg<=nargin & isstr(varargin{Carg})
		Xnames = varargin{Carg}; Carg=Carg+1;
	else,	Xnames = setstr(ones(size(X,2),1)*['<UnSpec>']); end

	while(~isempty(X))
		s=find(Xnames(1,:)=='-');
		if isempty(s) %-Not an interaction
			s=find(Xnames(1,:)=='_');
			if isempty(s) %-Straight covariate (or constant)
				if all(X(:,1)==X(1,1))
					nX=[nX,X(:,1)./abs(X(1,1))];
				else
					nX=[nX, (X(:,1)-mean(X(:,1)))/...
						max(abs(X(:,1)-mean(X(:,1))))];
				end
				nXnames=strvcat(nXnames,Xnames(1,:));
				X(:,1)=[]; Xnames(1,:)=[];
			else %-Levels of a factor - find rest
				d=~any(diff(abs(Xnames(:,1:s)))')';
				%-Watch out for interactions with same factor
				d=d & ~any(Xnames(2:size(Xnames,1),:)'=='-')';
				t=1:min(find([d;0]==0));
				tX=X(:,t); tXnames=Xnames(t,:);
				X(:,t)=[]; Xnames(t,:)=[];
				%-Normalise block
				if all(all(tX(1,:)==-1+tX(1,:)==0+tX(1,:)==1))
					%-Simple factor (poss. with constraints)
					nX=[nX,tX]; %-no normalisation
					nXnames=strvcat(nXnames,tXnames);
				else
					%-Mean constrained factor - no norm
					nX=[nX,tX];
					nXnames=strvcat(nXnames,tXnames);
				end
			end
		else
			%-interaction: isolate the block (where one factor constant)
			str=Xnames(1,:);
			p1=1:min([find(str(1:s)=='_'),s]);
			p2=s:min([find(str(s:length(str))=='_'),length(str)]);
			d1=any(diff(abs(Xnames(:,p1)))')';
			d2=any(diff(abs(Xnames(:,p2)))')';
			t=1:min(find([d1|d2;1]));
			%-Interaction block is X(:,t) - isolate for normalisation
			tX=X(:,t); tXnames=Xnames(t,:); X(:,t)=[]; Xnames(t,:)=[];
			%-Normalise
			if any(str(p1)=='_') & any(str(p2)=='_')
				%-Straight interaction of factors (poss. with constraints)
				% no normalisation - values should be -1,0&1.
				nX=[nX,tX];
				nXnames=strvcat(nXnames,tXnames);
			else
				%-Factor by covariate interaction
				vtX=tX(tX~=0);
				tX(tX~=0)=(vtX-min(vtX)+0.05)/max(vtX-min(vtX)+0.05);
				nX=[nX,tX];
				nXnames=strvcat(nXnames,tXnames);
			end
		end
	end
end
