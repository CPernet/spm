function spm_defaults_edit(arg1, arg2)

global CWD PRINTSTR LOGFILE CMDLINE GRID MODALITY
global DIM VOX TYPE SCALE OFFSET ORIGIN DESCRIP
global PET_DIM PET_VOX PET_TYPE PET_SCALE PET_OFFSET PET_ORIGIN PET_DESCRIP
global fMRI_DIM fMRI_VOX fMRI_TYPE fMRI_SCALE fMRI_OFFSET fMRI_ORIGIN fMRI_DESCRIP

if nargin == 0
	spm_figure('Clear','Interactive');
	set(spm_figure('FindWin','Interactive'),...
		'Name','Defaults Edit');
	pos = 1;

	callbacks = str2mat(...
		'spm_defaults_edit(''Directory'');',...
		'spm_defaults_edit(''Printing'');',...
		'spm_defaults_edit(''Misc'');',...
		'spm_defaults_edit(''Hdr'');',...
		'spm_realign(''Defaults'');',...
		'spm_sn3d(''Defaults'');',...
		'spm_defaults_edit(''Reset'');'...
		);

	a1 = spm_input('Defaults Area?',pos,'m',...
		['Working Directory|'...
		 'Printing Options|'...
		 'Miscellaneous Defaults|'...
		 'Header defaults|'...
		 'Realignment & Coregistration|'...
		 'Spatial Normalisation|'...
		 'Reset All']...
		);

	eval(deblank(callbacks(a1,:)));
	spm_figure('Clear','Interactive');

elseif strcmp(arg1, 'Directory')

	% Default directory for results files etc..
	%-----------------------------------------------------------------------
	CWD = deblank(spm_get(-1,'*','Directory'));
	chdir(CWD);


elseif strcmp(arg1, 'Misc')

	% Miscellaneous
	%-----------------------------------------------------------------------
	tmp = 'no';
	if ~isempty(LOGFILE), tmp = 'yes'; end;
	if (spm_input(['Log to file? (' tmp ')'], 2, 'y/n') == 'y')
		LOGFILE = [spm_str_manip(spm_input('Logfile Name:',2,'s', LOGFILE),'td') '.spmlog'];
	end

	tmp = 'no';
	if CMDLINE ~= 0, tmp = 'yes'; end;

	CMDLINE = spm_input(['Command Line Input (' tmp ')?'], 3, 'y/n') == 'y';
	GRID = spm_input('Grid value (0-1):', 4, 'e', GRID);

elseif strcmp(arg1, 'Printing')

	% Printing Defaults
	%-----------------------------------------------------------------------
	a0 = spm_input('Printing Mode?', 2, 'm', [...
			'Postscript to File|'...
			'Postscript to Printer|'...
			'Custom'...
			]);
	if (a0 == 1)
		fname = spm_str_manip(spm_input('Postscript filename:',3,'s', ['spm-' date]),'rtd');
		a1    = spm_input('Postscript Type?', 4, 'm', [...
			'PostScript for black and white printers|'...
			'PostScript for colour printers|'...
			'Level 2 PostScript for black and white printers|'...
			'Level 2 PostScript for colour printers|'...
			'Encapsulated PostScript (EPSF)|'...
			'Encapsulated Colour PostScript (EPSF)|'...
			'Encapsulated Level 2 PostScript (EPSF)|'...
			'Encapsulated Level 2 Color PostScript (EPSF)|'...
			'Encapsulated        with 1-bit preview (EPSI)|'...
			'Encapsulated Colour with 1-bit preview (EPSI)|'...
			'Encapsulated Level 2   w 1-bit preview (EPSI)|'...
			'Encapsulated Level 2 Colour  w preview (EPSI)|'...
			]);
		prstr1 = str2mat(...
			['print(''-dps'' ,''-append'',''' fname '.ps'');'],...
			['print(''-dpsc'',''-append'',''' fname '.ps'');'],...
			['print(''-dps2'',''-append'',''' fname '.ps'');'],...
			['print(''-dpsc2'',''-append'',''' fname '.ps'');']);
		prstr1 = str2mat(prstr1,...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-deps'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-depsc'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-deps2'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-depsc2'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-deps'',''-epsi'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-depsc'',''-epsi'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-deps2'',''-epsi'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;'],...
			['global PAGENUM;if isempty(PAGENUM),PAGENUM = 1;end;'...
			 'print(''-depsc2'',''-epsi'',[''' fname '_'' num2str(PAGENUM) ''.ps'']); PAGENUM = PAGENUM + 1;']);
		PRINTSTR = deblank(prstr1(a1,:));
	elseif (a0 == 2)
		printer = '';
		if (spm_input('Default Printer?', 3, 'y/n') == 'n')
			printer = spm_input('Printer Name:',3,'s');
			printer = [' -P' printer];
		end
		a1 = spm_input('Postscript Type:',4,'b','B & W|Colour', str2mat('-dps', '-dpsc'));
		PRINTSTR = ['print ' a1 printer];
	else
		PRINTSTR = spm_input('Print String',3,'s');
	end

elseif strcmp(arg1, 'Hdr')

	% Header Defaults
	%-----------------------------------------------------------------------

	n = 0;
	while n ~= 3
		tmp      = spm_input('Image size {voxels}',2,'s',...
			[num2str(DIM(1)) ' ' num2str(DIM(2)) ' ' num2str(DIM(3))]);
		[dim, n] = sscanf(tmp,'%d %d %d');
	end
	DIM = dim;

	n = 0;
	while n ~= 3
		tmp      = spm_input('Voxel Size {mm}',3,'s',...
			[num2str(VOX(1)) ' ' num2str(VOX(2)) ' ' num2str(VOX(3))]);
		[vox, n] = sscanf(tmp,'%g %g %g');
	end
	VOX = vox;

	SCALE = spm_input('Scaling Coefficient',4,'e',[SCALE]);

	type_val = [2 4 8 16 64];
	type_str = str2mat('Unsigned Char','Signed Short','Signed Integer','Floating Point','Double Precision');
	TYPE = spm_input(['Data Type (' deblank(type_str(find(type_val==TYPE),:)) ')'],5,'m',...
		'Unsigned Char	(8  bit)|Signed Short	(16 bit)|Signed Integer	(32 bit)|Floating Point|Double Precision',...
		[2 4 8 16 64]);
	OFFSET = spm_input('Offset  {bytes}',6,'e',[OFFSET]);
	n = 0;
	while n ~= 3
		tmp      = spm_input('Origin {voxels}',7,'s',...
			[num2str(ORIGIN(1)) ' ' num2str(ORIGIN(2)) ' ' num2str(ORIGIN(3))]);
		[origin, n] = sscanf(tmp,'%d %d %d');
	end
	ORIGIN = origin;
	DESCRIP = spm_input('Description',8,'s', DESCRIP);

	if strcmp(MODALITY,'PET')
		PET_DIM      = DIM;
		PET_VOX      = VOX;
		PET_TYPE     = TYPE;
		PET_SCALE    = SCALE;
		PET_OFFSET   = OFFSET;
		PET_ORIGIN   = ORIGIN;
		PET_DESCRIP  = DESCRIP;
	elseif strcmp(MODALITY,'FMRI')
		fMRI_DIM      = DIM;
		fMRI_VOX      = VOX;
		fMRI_TYPE     = TYPE;
		fMRI_SCALE    = SCALE;
		fMRI_OFFSET   = OFFSET;
		fMRI_ORIGIN   = ORIGIN;
		fMRI_DESCRIP  = DESCRIP;
	end

elseif strcmp(arg1, 'Reset')
	if exist('spm_defaults')==2
		spm_defaults;
	end
	spm('chmod',MODALITY);
end
