function [D] = spm_eeg_review_switchDisplay(D,type)
%__________________________________________________________________________
% Copyright (C) 2008 Wellcome Trust Centre for Neuroimaging

% Jean Daunizeau
% $Id: spm_eeg_review_switchDisplay.m 1792 2008-06-05 15:43:54Z jean $

switch type


    case 'standardData'

        delete(findobj('tag','plotEEG'))
        [D] = standardData(D);
        rotate3d off

    case 'scalpData'

        delete(findobj('tag','plotEEG'))
        [D] = scalpData(D);
        rotate3d off

    case 'visuRecon'

        delete(findobj('tag','plotEEG'))
        [D] = visuRecon(D);

    case 'imageData'

        [D] = imageData();


    case 'renderSource'

        [D] = renderSource();


end



%% Standard EEG/MEG data plot
function [D] = standardData(D)

POS = get(D.PSD.handles.hfig,'position');

if ~strcmp(D.transform.ID,'time')

    uicontrol('style','text','Position',[0.14 0.84 0.7 0.04].*repmat(POS(3:4),1,2),...
        'string','Not for time-frequency data !',...
        'BackgroundColor',0.95*[1 1 1],...
        'tag','plotEEG')


else

    D.PSD.VIZU.type = 'standardData';


    xg = 0:D.Fsample:D.Nsamples;
    xgl = xg./D.Fsample - D.timeOnset;
    D.PSD.handles.axes = axes('position',[0.06 0.08 0.9 0.82],...
        'parent',D.PSD.handles.hfig,'tag','plotEEG',...
        'box','on','xtick',xg,'xticklabel',xgl);

    load spm_eeg_review_buttons.mat

    switch D.PSD.type

        case 'continuous'

            % Selection buttons
            Nevents = length(D.trials.events);
            if Nevents >0
                enab = 'on';
            else
                enab = 'off';
            end

            D.PSD.handles.BUTTONS.sb1 = uicontrol(D.PSD.handles.hfig,'Position',[0.56 0.92 0.05 0.04].*repmat(POS(3:4),1,2),...
                'cdata',Y9,'callback','spm_eeg_review_callbacks(''select'',''add'')',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tooltipstring','Add event to current selection (2 mouse clicks)',...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.sb1,'units','normalized');

            D.PSD.handles.BUTTONS.sb2 = uicontrol(D.PSD.handles.hfig,'Position',[0.42 0.92 0.05 0.04].*repmat(POS(3:4),1,2),...
                'cdata',Y10,'callback','spm_eeg_review_callbacks(''select'',''goto'',0)',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tooltipstring','Go to closest selected event (forward)','enable',enab,...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.sb2,'units','normalized');

            D.PSD.handles.BUTTONS.sb3 = uicontrol(D.PSD.handles.hfig,'Position',[0.48 0.92 0.05 0.04].*repmat(POS(3:4),1,2),...
                'cdata',Y11,'callback','spm_eeg_review_callbacks(''select'',''goto'',1)',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tooltipstring','Go to closest selected event (backward)','enable',enab,...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.sb3,'units','normalized');

        case 'epoched'

            trN = D.PSD.trials.current(1);

            % Event selection button
            D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.42 0.92 0.25 0.03].*repmat(POS(3:4),1,2),...
                'style','popupmenu','string',D.PSD.trials.TrLabels,...
                'value',trN,...
                'callback','spm_eeg_review_callbacks(''select'',''switch'')',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.pop1,'units','normalized')

    end
    
    % SAVE button
    D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.69 0.92 0.1 0.04].*repmat(POS(3:4),1,2),...
        'style','pushbutton','string','SAVE',...
        'callback','spm_eeg_review_callbacks(''file'',''save'')',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.pop1,'units','normalized')

    % data scrolling buttons
    % Temporal navigation (slider)
    xlim = D.PSD.VIZU.xlim;
    D.PSD.handles.BUTTONS.slider_step = uicontrol(D.PSD.handles.hfig,'style','slider',...
        'Position',[0.1 0.02 0.775 0.02].*repmat(POS(3:4),1,2),...
        'min',1,'max',D.Nsamples,'value',mean(xlim),...
        'sliderstep',[(xlim(2)/20)/(D.Nsamples-1) (xlim(2)/5)/(D.Nsamples-1)],...
        'callback','spm_eeg_review_callbacks(''visu'',''slider_t'',0)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Scroll data',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.slider_step,'units','normalized')
%     D.PSD.handles.BUTTONS.focus_temp = uicontrol(D.PSD.handles.hfig,'style','edit',...
%         'enable','on','callback','spm_eeg_review_callbacks(''visu'',''focus_t'',0)',...
%         'BusyAction','cancel',...
%         'Interruptible','off',...
%         'Position',[0.9 0.02 0.05 0.02].*repmat(POS(3:4),1,2),'string',round(mean(xlim)),...
%         'tag','plotEEG');
%     set(D.PSD.handles.BUTTONS.focus_temp,'units','normalized')
    % Page switchers
    D.PSD.handles.BUTTONS.goPlusOne = uicontrol(D.PSD.handles.hfig,'style','pushbutton','cdata',repmat(Y1,[1,1,3]),...
        'Position',[0.075 0.02 0.025 0.02].*repmat(POS(3:4),1,2),'callback','spm_eeg_review_callbacks(''visu'',''goOne'',0)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Go one page backward',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.goPlusOne,'units','normalized')
    D.PSD.handles.BUTTONS.goMinusOne = uicontrol(D.PSD.handles.hfig,'style','pushbutton','cdata',repmat(Y2,[1,1,3]),...
        'Position',[0.875 0.02 0.025 0.02].*repmat(POS(3:4),1,2),'callback','spm_eeg_review_callbacks(''visu'',''goOne'',1)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Go one page forward',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.goMinusOne,'units','normalized')
    D.PSD.handles.BUTTONS.vb3 = uicontrol(D.PSD.handles.hfig,'Position',[0.02 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y5,...
        'Callback','spm_eeg_review_callbacks(''visu'',''time_w'',2)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Increase width of the plotted time window',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb3,'units','normalized');
    D.PSD.handles.BUTTONS.vb4 = uicontrol(D.PSD.handles.hfig,'Position',[0.08 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y6,...
        'Callback','spm_eeg_review_callbacks(''visu'',''time_w'',0.5)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Decrease width of the plotted time window',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb4,'units','normalized');
    % Visualization buttons
    D.PSD.handles.BUTTONS.vb1 = uicontrol(D.PSD.handles.hfig,'Position',[0.14 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y3,...
        'Callback','spm_eeg_review_callbacks(''visu'',''iten_sc'',2)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Increase contrast (intensity rescaling)',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb1,'units','normalized');

    D.PSD.handles.BUTTONS.vb2 = uicontrol(D.PSD.handles.hfig,'Position',[0.2 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y4,...
        'Callback','spm_eeg_review_callbacks(''visu'',''iten_sc'',0.5)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Decrease contrast (intensity rescaling)',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb2,'units','normalized');


    D.PSD.handles.BUTTONS.vb5 = uicontrol(D.PSD.handles.hfig,'Position',[0.26 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y7,...
        'callback','spm_eeg_review_callbacks(''visu'',''zoom'',1)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Zoom in (mouse box)',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb5,'units','normalized');

    D.PSD.handles.BUTTONS.vb1 = uicontrol(D.PSD.handles.hfig,'Position',[0.34 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y8,...
        'Callback','spm_eeg_review_callbacks(''visu'',''scalp_interp'',1)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','scalp interpolation (image scalp data)',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb1,'units','normalized');
    % scale axes
    D.PSD.handles.scale = axes('position',[0.875 0.93 0.0445 0.0225],...
        'xtick',1,'ytick',1,'color',0.95*[1 1 1],...
        'tag','plotEEG');
    set(D.PSD.handles.scale,'units','normalized');

end


%% 'SPM-like' EEG/MEG data plot
function [D] = scalpData(D)

POS = get(D.PSD.handles.hfig,'position');

if strcmp(D.PSD.type,'continuous')

    uicontrol('style','text','Position',[0.14 0.84 0.7 0.04].*repmat(POS(3:4),1,2),...
        'string','Only for epoched data !',...
        'BackgroundColor',0.95*[1 1 1],...
        'tag','plotEEG')

else


    D.PSD.VIZU.type = 'scalpData';

    trN = D.PSD.trials.current(1);

    % Visualization buttons

    load spm_eeg_review_buttons.mat


    D.PSD.handles.BUTTONS.vb5 = uicontrol(D.PSD.handles.hfig,'Position',[0.26 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y7,...
        'callback','spm_eeg_review_callbacks(''visu'',''zoom'',1)',...
        'BusyAction','cancel',...
        'Interruptible','off',...
        'tooltipstring','Zoom in (plot channel in new window)',...
        'tag','plotEEG');
    set(D.PSD.handles.BUTTONS.vb5,'units','normalized');


    if strcmp(D.transform.ID,'time') % only for time data!
        
        % Event selection button
        D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.42 0.82 0.25 0.13].*repmat(POS(3:4),1,2),...
            'style','listbox','min',1,'max',length(D.PSD.trials.TrLabels)+1,...
            'string',D.PSD.trials.TrLabels,...
            'value',trN,...
            'callback','spm_eeg_review_callbacks(''select'',''switch'')',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.pop1,'units','normalized')
        
        D.PSD.handles.BUTTONS.vb1 = uicontrol(D.PSD.handles.hfig,'Position',[0.14 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y3,...
            'Callback','spm_eeg_review_callbacks(''visu'',''iten_sc'',2)',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tooltipstring','Increase contrast (intensity rescaling)',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.vb1,'units','normalized');

        D.PSD.handles.BUTTONS.vb2 = uicontrol(D.PSD.handles.hfig,'Position',[0.2 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y4,...
            'Callback','spm_eeg_review_callbacks(''visu'',''iten_sc'',0.5)',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tooltipstring','Decrease contrast (intensity rescaling)',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.vb2,'units','normalized');

        D.PSD.handles.BUTTONS.vb1 = uicontrol(D.PSD.handles.hfig,'Position',[0.34 0.92 0.05 0.04].*repmat(POS(3:4),1,2),'cdata',Y8,...
            'Callback','spm_eeg_review_callbacks(''visu'',''scalp_interp'',1)',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tooltipstring','scalp interpolation (image scalp data)',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.vb1,'units','normalized');
        
        % SAVE button
        D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.69 0.92 0.1 0.04].*repmat(POS(3:4),1,2),...
            'style','pushbutton','string','SAVE',...
            'callback','spm_eeg_review_callbacks(''file'',''save'')',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.pop1,'units','normalized')
        
    else
        
        % Event selection button
        D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.42 0.82 0.25 0.13].*repmat(POS(3:4),1,2),...
            'style','popupmenu','min',1,'max',length(D.PSD.trials.TrLabels),...
            'string',D.PSD.trials.TrLabels,...
            'value',trN,...
            'callback','spm_eeg_review_callbacks(''select'',''switch'')',...
            'BusyAction','cancel',...
            'Interruptible','off',...
            'tag','plotEEG');
        set(D.PSD.handles.BUTTONS.pop1,'units','normalized')

    end

    % for EEG and MEG sensors
    Ieeg = find(strcmp('EEG',{D.channels.type}));
    if ~isempty(Ieeg)
        posEEG(:,1) = [D.channels(Ieeg).X_plot2D]';
        posEEG(:,2) = [D.channels(Ieeg).Y_plot2D]';
        EEGlabels = {D.channels(Ieeg).label};
        if strcmp(D.transform.ID,'time')
            yEEG = D.data.y(Ieeg,:,trN);
        else
            yEEG = D.data.y(Ieeg,:,:,trN);
        end
        miY = min(yEEG(:));
        maY = max(yEEG(:));
    else
        posEEG = [];
    end
    Imeg = find(strcmp('MEG',{D.channels.type}));
    if ~isempty(Imeg)
        posMEG(:,1) = [D.channels(Imeg).X_plot2D]';
        posMEG(:,2) = [D.channels(Imeg).Y_plot2D]';
        MEGlabels = {D.channels(Imeg).label};
        if strcmp(D.transform.ID,'time')
            yMEG = D.data.y(Imeg,:,trN);
        else
            yMEG = D.data.y(Imeg,:,:,trN);
        end
        miY = min(yMEG(:));
        maY = max(yMEG(:));
    else
        posMEG = [];
    end

    p = [posEEG;posMEG]';
    D.PSD.VIZU.visuSensors = [Ieeg(:);Imeg(:)];

    % position of plotting area for eeg data in graphics figure
    Pos = [0.023 0.05 0.95 0.72];

    % Compute width of display boxes
    Rxy = 1.5; % ratio of x- to y-axis lengths
    Npos = size(p, 2); % number of positions
    if Npos > 1
        % more than 1 channel for display
        for i = 1:Npos
            for j = 1:Npos
                % distance between channels
                d(i,j) = sqrt(sum((p(:,j)-p(:,i)).^2));
                % their angle
                alpha(i,j) = acos((p(1,j)-p(1,i))/(d(i,j)+eps));
            end
        end
        d = d/2;
        alpha(alpha > pi/2) = pi-alpha(alpha > pi/2);
        Talpha = asin(1/(sqrt(1+Rxy^2)));
        for i = 1:Npos
            for j = 1:Npos
                if alpha(i,j) <= Talpha
                    x(i,j) = d(i,j)*cos(alpha(i,j));
                else
                    x(i,j) = Rxy*d(i,j)*cos(pi/2-alpha(i,j));
                end
            end
        end
        % half length of axes in x-direction
        Lxrec = min(x(find(x~=0)));
    else
        % only one channel
        Lxrec = 1;
    end
    % coordinates of lower left corner of drawing boxes
    p(1, :) = p(1, :) - Lxrec;
    p(2, :) = p(2, :) - Lxrec/Rxy;
    % envelope of coordinates
    e = [min(p(1,:)) max(p(1,:))+2*Lxrec min(p(2,:)) max(p(2,:))+2*Lxrec/Rxy];
    % shift coordinates to zero
    p(1,:) = p(1,:) - mean(e(1:2));
    p(2,:) = p(2,:) - mean(e(3:4));
    % scale such that envelope goes from -0.5 to 0.5
    Sf = 0.5/max(max(abs(p(1,:))), (max(abs(p(2,:)))));
    p = Sf*p;
    Lxrec = Sf*Lxrec;
    % and back to centre
    p = p+0.5;
    % translate and scale to fit into drawing area of figure
    p(1,:) = Pos(3)*p(1,:)+Pos(1);
    p(2,:) = Pos(4)*p(2,:)+Pos(2);
    % cell vector for axes handles of single channel plots
    handles.axes = zeros(1, Npos);

    % plot the graphs
    for i = 1:Npos
        % use frames behind the axes because of weird bug when hitting axes...
        D.PSD.handles.fra(i) = uipanel(...
            'units','normalized','Position',...
            [p(1,i) p(2,i) 2*Lxrec*Pos(3) 2*Lxrec/Rxy*Pos(4)],...
            'Parent', D.PSD.handles.hfig,...
            'userdata',i,...
            'tag','plotEEG',...
            'visible','on');
        D.PSD.handles.axes(i) = axes('Position',...
            [p(1,i) p(2,i) 2*Lxrec*Pos(3) 2*Lxrec/Rxy*Pos(4)],...
            'NextPlot', 'replacechildren',...
            'Parent', D.PSD.handles.hfig,...
            'YLim', [miY maY],...
            'YLimMode','manual',...
            'XLim', [1 D.Nsamples],...
            'XLimMode','manual',...
            'XTick', [], 'YTick', [], 'Box', 'off',...
            'userdata',i,...
            'hittest','off',...
            'ALimMode','manual',...
            'tag','plotEEG');
        set(D.PSD.handles.axes(i),'units','normalized');
        if ~strcmp(D.transform.ID,'time')
            set(D.PSD.handles.axes(i),'ylim',[1 length(D.transform.frequencies)]);
        end

    end

    % scale axes
    if strcmp(D.transform.ID,'time') % only for time data!
        D.PSD.handles.scale = axes('position',...
            [0.875 0.93 2*Lxrec*Pos(3) 2*Lxrec/Rxy*Pos(4)],'color',0.95*[1 1 1],...
            'xtick',1,'xticklabel',[num2str(D.Nsamples.*1e3./D.Fsample),' ms'],...
            'ytick',1,'userdata',0,'tag','plotEEG',...
            'hittest','off');
        % if ~isempty(Imeg)
        % D.PSD.handles.scale(2) = axes('position',...
        %     [0.875 0.925 2*Lxrec*Pos(3) 2*Lxrec/Rxy*Pos(4)],'color',0.95*[1 1 1],...
        %     'xtick',1,'xticklabel',[num2str(D.Nsamples.*1e3./D.Fsample),' ms'],...
        %     'ytick',1,'userdata',0,'tag','plotEEG',...
        %     'hittest','off');
        % end
        set(D.PSD.handles.scale,'units','normalized');
    end

    set(D.PSD.handles.axes,'visible','on')

end


%% RENDERING OF INVERSE SOLUTIONS
function [D] = visuRecon(D)
POS = get(D.PSD.handles.hfig,'position');

if ~strcmp(D.transform.ID,'time')

    uicontrol('style','text','Position',[0.14 0.84 0.7 0.04].*repmat(POS(3:4),1,2),...
        'string','Not for time-frequency data (will be updated) !',...
        'BackgroundColor',0.95*[1 1 1],...
        'tag','plotEEG')

else

    if isfield(D.other,'inv') && ~isempty(D.other.inv) % && isfield(D.other.inv{1},'inverse')


        isInv = zeros(length(D.other.inv),1);
        for i=1:length(D.other.inv)
            if isfield(D.other.inv{i},'inverse') && strcmp(D.other.inv{i}.method,'Imaging')
                isInv(i) = 1;
            end
        end

        Ninv = length(find(isInv));

        if Ninv>=1

            isInv = find(isInv);

            D.PSD.VIZU.type = 'visuRecon';

            pst = [];
            for i=1:Ninv
                if ~isfield(D.other.inv{isInv(i)},'comment')
                    D.other.inv{isInv(i)}.comment{1} = num2str(i);
                end
                if ~isfield(D.other.inv{isInv(i)},'date')
                    D.other.inv{isInv(i)}.date(1,:) = 'unknown';
                    D.other.inv{isInv(i)}.date(2,:) = '       ';
                end
                labels{i} = [D.other.inv{isInv(i)}.comment{1}];%num2str(i);
                callbacks{i} = ['spm_eeg_review_callbacks(''visu'',''inv'',',num2str(isInv(i)),')'];
                F(i) = D.other.inv{isInv(i)}.inverse.F;
                pst = [pst;D.other.inv{isInv(i)}.inverse.pst(:)];
            end
            pst = unique(pst);
            hInv = D.PSD.handles.tabs.hp;
            [h] = spm_uitab(hInv,labels,callbacks,'plotEEG');
            D.PSD.handles.SubTabs_inv = h;
            D.PSD.invN = isInv(1);
            trN = D.PSD.trials.current(1);

            model = D.other.inv{D.PSD.invN}.inverse;
            J = zeros(model.Nd,size(model.T,1));
            J(model.Is,:) = model.J{trN}*model.T';
            
            D.PSD.VIZU.x0 = 1;

            D.PSD.handles.axes = axes('position',[0.2 0.6 0.4 0.3],...
                'parent',D.PSD.handles.hfig,'tag','plotEEG',...
                'box','on','CLimMode','Manual',...
                'CLim',[min(min(J)) max(max(J))],...
                'visible','off');


            % Create mesh and related objects
            mesh.vertices = D.other.inv{D.PSD.invN}.mesh.tess_mni.vert;
            mesh.faces = D.other.inv{D.PSD.invN}.mesh.tess_mni.face;

            options.texture = J(:,D.PSD.VIZU.x0);
            options.hfig = D.PSD.handles.hfig;
            options.ParentAxes = D.PSD.handles.axes;
            options.tag = 'plotEEG';
            options.visible = 'off';
            [out] = spm_eeg_render(mesh,options);

            if isfield(D.other.inv{D.PSD.invN}.inverse,'dipfit')
                xyz = D.other.inv{D.PSD.invN}.inverse.dipfit.Lpos;
                Np  = size(xyz,2);
                radius = D.other.inv{D.PSD.invN}.inverse.dipfit.radius;
                [x,y,z] = sphere(20);
                axes(D.PSD.handles.axes)
                for i=1:Np
                    fvc = surf2patch(x.*radius+xyz(1,i),...
                        y.*radius+xyz(2,i),z.*radius+xyz(3,i));
                    D.PSD.handles.dipSpheres(i) = patch(fvc);
                    set(D.PSD.handles.dipSpheres(i),'facecolor',[1 1 1],...
                        'edgecolor','none','facealpha',0.5,...
                        'tag','dipSpheres');
                end
            end

            D.PSD.handles.mesh = out.handles.p;
            D.PSD.handles.BUTTONS.transp = out.handles.transp;
            D.PSD.handles.colorbar = out.handles.hc;
            D.PSD.handles.BUTTONS.ct1 = out.handles.s1;
            D.PSD.handles.BUTTONS.ct2 = out.handles.s2;
            set(D.PSD.handles.BUTTONS.transp,'position',[0.1 0.65 0.025 0.2])
            set(D.PSD.handles.BUTTONS.ct1,'position',[0.74 0.65 0.025 0.2])
            set(D.PSD.handles.BUTTONS.ct2,'position',[0.7675 0.65 0.025 0.2])
            set(D.PSD.handles.colorbar,'position',[0.8 0.65 0.025 0.2])

            nt = length(pst);

            set(D.PSD.handles.mesh,'visible','on')
            set(D.PSD.handles.BUTTONS.transp,'visible','on')
            set(D.PSD.handles.colorbar,'visible','on')
            set(D.PSD.handles.BUTTONS.ct1,'visible','on')
            set(D.PSD.handles.BUTTONS.ct2,'visible','on')

            % Event selection button
            D.PSD.handles.BUTTONS.pop1 = uicontrol(D.PSD.handles.hfig,'Position',[0.42 0.92 0.25 0.03].*repmat(POS(3:4),1,2),...
                'style','popupmenu','string',D.PSD.trials.TrLabels,...
                'value',trN,...
                'callback','spm_eeg_review_callbacks(''select'',''switch'')',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.pop1,'units','normalized')

            % Temporal navigation (slider)
            xg = 0:D.Fsample/10:D.Nsamples;
            xg./D.Fsample*1e3+D.timeOnset*1e3;
            load spm_eeg_review_buttons.mat
            xlim = D.PSD.VIZU.xlim;
            D.PSD.handles.BUTTONS.slider_step = uicontrol(D.PSD.handles.hfig,'style','slider',...
                'Position',[0.2 0.58 0.4 0.018].*repmat(POS(3:4),1,2),...
                'min',pst(1),'max',pst(end),'value',pst(1),...
                'sliderstep',[1/(nt-1) 2/(nt-1)],...
                'callback','spm_eeg_review_callbacks(''visu'',''slider_t'',0)',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'tooltipstring','Scroll data',...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.slider_step,'units','normalized')
            D.PSD.handles.BUTTONS.focus_temp = uicontrol(D.PSD.handles.hfig,'style','edit',...
                'enable','on','callback','spm_eeg_review_callbacks(''visu'',''focus_t'',0)',...
                'BusyAction','cancel',...
                'Interruptible','off',...
                'Position',[0.63 0.58 0.15 0.02].*repmat(POS(3:4),1,2),'string',1,...
                'tag','plotEEG');
            set(D.PSD.handles.BUTTONS.focus_temp,'units','normalized')

            % Text uicontrols for inverse method info
            str{1} = ['Label: ',D.other.inv{D.PSD.invN}.comment{1}];
            try
                str{2} = ['Date: ',D.other.inv{D.PSD.invN}.date(1,:),', ',D.other.inv{D.PSD.invN}.date(2,:)];
            catch
                str{2} = ['Date: ',D.other.inv{D.PSD.invN}.date(1,:)];
            end
            str{3} = ['Modality: ',D.other.inv{D.PSD.invN}.modality];
            if strcmp(D.other.inv{D.PSD.invN}.method,'Imaging')
                source = 'distributed';
            else
                source = 'equivalent current dipoles';
            end
            str{4} = ['Source model: ',source,' (',D.other.inv{D.PSD.invN}.method,')'];
            str{5} = ['Nb of included dipoles: ',...
                num2str(length(D.other.inv{D.PSD.invN}.inverse.Is)),...
                ' / ',num2str(D.other.inv{D.PSD.invN}.inverse.Nd)];
            str{6} = ['Inversion method: ',D.other.inv{D.PSD.invN}.inverse.type];
            try
                str{7} = ['Time window of interest: ',...
                    num2str(D.other.inv{D.PSD.invN}.inverse.woi(1)),...
                    ' to ',num2str(D.other.inv{D.PSD.invN}.inverse.woi(2)),' ms'];
            catch
                str{7} = ['Time window of interest: ',...
                    num2str(D.other.inv{D.PSD.invN}.inverse.pst(1)),...
                    ' to ',num2str(D.other.inv{D.PSD.invN}.inverse.pst(end)),' ms'];
            end
            try
                if D.other.inv{D.PSD.invN}.inverse.Han
                    han = 'yes';
                else
                    han = 'no';
                end
                str{8} = ['Hanning: ',han];
            catch
                str{8} = ['Hanning: ?'];
            end
            if isfield(D.other.inv{D.PSD.invN}.inverse,'lpf')
                str{9} = ['Band pass filter: ',num2str(D.other.inv{D.PSD.invN}.inverse.lpf),...
                    ' to ',num2str(D.other.inv{D.PSD.invN}.inverse.hpf), 'Hz'];
            else
                str{9} = ['Band pass filter: default'];
            end
            str{10} = ['Nb of temporal modes: ',...
                num2str(size(D.other.inv{D.PSD.invN}.inverse.T,2))];
            str{11} = ['Variance accounted for: ',...
                num2str(D.other.inv{D.PSD.invN}.inverse.R2),' %'];
            str{12} = ['Log model evidence (free energy): ',...
                num2str(D.other.inv{D.PSD.invN}.inverse.F)];
            [FS,sf] = spm('FontSize',8);
            D.PSD.handles.infoText = uicontrol('style','text','string',str,...
                'units','normalized','position',[0.09 0.1 0.3 0.18],...
                'HorizontalAlignment','left',...
                'Fontsize',FS,...
                'BackgroundColor',0.95*[1 1 1],...
                'tag','plotEEG');

            if Ninv>1
                D.PSD.handles.BMCpanel = uipanel('position',[0.42 0.05 0.5 0.25],...
                    'bordertype','beveledin',...
                    'BackgroundColor',0.95*[1 1 1],...
                    'tag','plotEEG');
                D.PSD.handles.BMCplot = axes('position',[0.5 0.1 0.4 0.15],...
                    'parent',D.PSD.handles.hfig,...
                    'box','on','visible','on');
                hb = bar(D.PSD.handles.BMCplot,F-min(F),...
                    'barwidth',0.5,...
                    'FaceColor',0.5*[1 1 1],...
                    'tag','plotEEG');
                hold on
                D.PSD.handles.BMCcurrent = plot(D.PSD.handles.BMCplot,...
                    1,0,'ro','userdata',isInv);
                set(D.PSD.handles.BMCplot,'xticklabel',labels,...
                    'tag','plotEEG');
                hold off
                grid on;
                set(gca,'hittest','off')
                set(get(gca,'xlabel'),'string','Inversion models');
                set(get(gca,'ylabel'),'string','Relative (to min) model free energies')
                set(get(gca,'title'),'string','Variational Bayesian model comparison',...
                    'FontWeight','bold')
            end

        else

            uicontrol('style','text','Position',[0.14 0.84 0.7 0.04].*repmat(POS(3:4),1,2),...
                'string','There is no (imaging) inverse source reconstruction in this data file !',...
                'BackgroundColor',0.95*[1 1 1],...
                'tag','plotEEG')
            tag = 'plotEEG';
            labels{1} = '1';
            callbacks{1} = [];
            hInv = D.PSD.handles.tabs.hp;
            [h] = spm_uitab(hInv,labels,callbacks,'plotEEG');


        end


    else
        uicontrol('style','text','Position',[0.14 0.84 0.7 0.04].*repmat(POS(3:4),1,2),...
            'string','There is no inverse source reconstruction in this data file !',...
            'BackgroundColor',0.95*[1 1 1],...
            'tag','plotEEG')
        tag = 'plotEEG';
        labels{1} = '0';
        callbacks{1} = [];
        hInv = D.PSD.handles.tabs.hp;
        [h] = spm_uitab(hInv,labels,callbacks,'plotEEG');

    end


end



