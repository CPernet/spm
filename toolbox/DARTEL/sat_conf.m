function nrm = sat_conf
% This may eventually go into tbx_cfg_dartel.m
%__________________________________________________________________________
% Copyright (C) 2009 Wellcome Trust Centre for Neuroimaging

% John Ashburner & Guillaume Flandin
% $Id: sat_conf.m 2794 2009-02-26 20:07:38Z john $

flowfield         = cfg_files;
flowfield.tag     =  'flowfield';
flowfield.name    = 'Flow Field';
flowfield.filter  = 'nifti';
flowfield.ufilter = '^u_.*\.nii$';
flowfield.num     = [1 1];
flowfield.help    = {'DARTEL flow field for this subject.'};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
images        = cfg_files;
images.tag    = 'images';
images.name   = 'Images';
images.filter = 'nifti';
images.num    = [1 Inf];
images.help   = {'Images for this subject to spatially normalise.'};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
subj      = cfg_branch;
subj.tag  = 'subj';
subj.name = 'Subject';
subj.val  = {flowfield,images};
subj.help = {'Subject to be spatially normalized.'};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
subjs        = cfg_repeat;
subjs.tag    = 'subj';
subjs.name   = 'Subjects';
subjs.values = {subj};
subjs.help   = {'Subjects to be spatially normalized.'};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
template        = cfg_files;
template.tag    = 'template';
template.name   = 'DARTEL Template';
template.filter = 'nifti';
template.num    = [1 1];
template.help   = {...
['Select the final Template file generated by DARTEL. This will be affine '...
 'registered with a TPM file, such that the resulting spatially normalised '...
 'images are closer aligned to MNI space.']};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
fwhm         = cfg_entry;
fwhm.tag     = 'fwhm';
fwhm.name    = 'Gaussian FWHM';
fwhm.val{1}  = [8 8 8];
fwhm.strtype = 'e';
fwhm.num     = [1 3];
fwhm.help    = {'Specify the full-width at half maximum (FWHM) of the Gaussian blurring kernel in mm. Three values should be entered, denoting the FWHM in the x, y and z directions.'};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
preserve         = cfg_menu;
preserve.tag     = 'preserve';
preserve.name    = 'Preserve';
preserve.help    = {
'Preserve Concentrations: Smoothed spatially normalised images (sw*) represent weighted averages of the signal under the smoothing kernel, approximately preserving the intensities of the original images.'
''
'Preserve Total: Smoothed and spatially normalised images preserve the total amount of signal from each region in the images (smw*). Areas that are expanded during warping are correspondingly reduced in intensity.'
}';
preserve.labels = {
                   'Preserve Concentrations'
                   'Preserve Amount'
}';
preserve.values = {0 1};
preserve.val    = {0};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
vox          = cfg_entry;
vox.tag      = 'vox';
vox.name     = 'Voxel sizes';
vox.num      = [1 3];
vox.strtype  = 'e';
vox.def      = @(val)spm_get_defaults('defs.vox',val{:});
vox.help     = {[...
'Specify the voxel sizes of the deformation field to be produced. ',...
'Non-finite values will default to the voxel sizes of the template image',...
'that was originally used to estimate the deformation.']};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
bb           = cfg_entry;
bb.tag       = 'bb';
bb.name      = 'Bounding box';
bb.strtype   = 'e';
bb.num       = [2 3];
bb.def       = @(val)spm_get_defaults('defs.bb',val{:});
bb.help      = {[...
'Specify the bounding box of the deformation field to be produced. ',...
'Non-finite values will default to the bounding box of the template image',...
'that was originally used to estimate the deformation.']};
% ---------------------------------------------------------------------
%
% ---------------------------------------------------------------------
nrm = cfg_exbranch;
nrm.tag = 'mni_norm';
nrm.name = 'Normalise to MNI Space';
nrm.val  = {template,subjs,vox,bb,preserve,fwhm};
nrm.prog = @spm_dartel_norm_fun;
nrm.help = {[...
'Normally, DARTEL generates warped images that align with the average-shaped template. '...
'This routine includes an initial affine regisration of the template (the final one '...
'generated by DARTEL), with the TPM data released with SPM.'],[...
'"Smoothed" (blurred) spatially normalised images are generated in such a '...
'way that the original signal is preserved. Normalised images are '...
'generated by a "pushing" rather than a "pulling" (the usual) procedure. '...
'Note that trilinear interpolation is used, and no masking is done.  It '...
'is therefore essential that the images are realigned and resliced '...
'before they are spatially normalised.  Alternatively, contrast images '...
'generated from unsmoothed native-space fMRI/PET data can be spatially '...
'normalised for a 2nd level analysis.'],[...
'Two "preserve" options are provided.  One of them should do the '...
'equavalent of generating smoothed "modulated" spatially normalised '...
'images.  The other does the equivalent of smoothing the modulated '...
'normalised fMRI/PET, and dividing by the smoothed Jacobian determinants.']};

