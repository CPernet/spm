function c = spm_config_render
% Configuration file for surface visualisation
%_______________________________________________________________________
% Copyright (C) 2007 Wellcome Trust Centre for Neuroimaging

% John Ashburner
% $Id$

entry = inline(['struct(''type'',''entry'',''name'',name,'...
        '''tag'',tag,''strtype'',strtype,''num'',num,''help'',{{}})'],...
        'name','tag','strtype','num');

files = inline(['struct(''type'',''files'',''name'',name,'...
        '''tag'',tag,''filter'',fltr,''num'',num,''help'',{{}})'],...
        'name','tag','fltr','num');

mnu = inline(['struct(''type'',''menu'',''name'',name,'...
        '''tag'',tag,''labels'',{labels},''values'',{values},''help'',{{}})'],...
        'name','tag','labels','values');

branch = inline(['struct(''type'',''branch'',''name'',name,'...
        '''tag'',tag,''val'',{val},''help'',{{}})'],...
        'name','tag','val');
repeat = inline(['struct(''type'',''repeat'',''name'',name,''tag'',tag,'...
         '''values'',{values})'],'name','tag','values');

Red = mnu('Red','Red',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
Red.val = {1};
Red.help = {['The intensity of the red colouring.']};

Green = mnu('Green','Green',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
Green.val = {1};
Green.help = {['The intensity of the green colouring.']};

Blue = mnu('Blue','Blue',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
Blue.val = {1};
Blue.help = {['The intensity of the blue colouring.']};

Color = branch('Color','Color',{Red,Green,Blue});
Color.help = {[...
'Specify the colour using a mixture of red, green and blue. '...
'For example, white is specified by 1,1,1, black is by 0,0,0 and '...
'purple by 1,0,1.']};

AmbientStrength = mnu('Ambient Strength','AmbientStrength',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
AmbientStrength.val = {0.2};
AmbientStrength.help = {[...
'The strength with which the object reflects ambiant '...
'(non-directional) lighting.']};

DiffuseStrength = mnu('Diffuse Strength','DiffuseStrength',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
DiffuseStrength.val = {0.8};
DiffuseStrength.help = {[...
'The strength with which the object diffusely reflects '...
'light. Mat surfaces reflect light diffusely, whereas '...
'shiny surfaces reflect speculatively.']};

SpecularStrength = mnu('Specular Strength','SpecularStrength',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
SpecularStrength.val = {0.2};
SpecularStrength.help = {[...
'The strength with which the object specularly reflects '...
'light (i.e. how shiny it is). '...
'Mat surfaces reflect light diffusely, whereas '...
'shiny surfaces reflect speculatively.']};

SpecularExponent = mnu('Specular Exponent','SpecularExponent',...
    {'0.01','0.1','10','100'},{0.01,0.1,10,100});
SpecularExponent.val = {10};
SpecularExponent.help = {[...
'A parameter describing the specular reflectance behaviour. '...
'It relates to the size of the high-lights.']};

SpecularColorReflectance = mnu('Specular Color Reflectance',...
    'SpecularColorReflectance',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
SpecularColorReflectance.val = {0.8};
SpecularColorReflectance.help = {[...
'Another parameter describing the specular reflectance behaviour.']};

FaceAlpha = mnu('Face Alpha','FaceAlpha',...
    {'0.0','0.2','0.4','0.6','0.8','1.0'},...
    {0,0.2,0.4,0.6,0.8,1});
FaceAlpha.val = {1};
FaceAlpha.help = {[...
'The opaqueness of the surface.  A value of 1 means it is '...
'opaque, whereas a value of 0 means it is transparent.']};

fname = files('Surface File','SurfaceFile','mat',1);
fname.ufilter = '^surf_.*\.mat';
fname.help = {[...
'Filename of the surf_*.mat file containing the rendering information. '...
'This can be generated via the surface extraction routine in SPM. '...
'Normally, a surface is extracted from grey and white matter tissue class '...
'images, but it is also possible to threshold e.g. an spmT image so that '...
'activations can be displayed.']};

Object = branch('Object','Object',...
{fname,Color,DiffuseStrength,AmbientStrength,SpecularStrength,SpecularExponent,SpecularColorReflectance,FaceAlpha});
Object.help = {[...
'Each object is a surface (from a surf_*.mat file), which may have a '...
'number of light-reflecting qualities, such as colour and shinyness.']};

Objects = repeat('Objects','Objects',{Object});
Objects.help = {[...
'Several surface objects can be displayed together in different colours '...
'and with different reflective properties.']};



Position = entry('Position','Position','e',[1 3]);
Position.val = {[100 100 100]};
Position.help = {'The position of the light in 3D.'};

Light  = branch('Light','Light',{Position,Color});
Light.help = {'Specification for a light source.'};

Lights = repeat('Lights','Lights',{Light});
Lights.help = {[...
'There should be at least one light specified so that the objects '...
'can be clearly seen.']};

c = branch('Surface Rendering','SRender',{Objects,Lights});
c.prog = @spm_srender;
c.help = {[...
'This utility is for visualising surfaces.  Surfaces first need to be '...
'extracted and saved in surf_*.mat files using the surface extraction '...
'routine of SPM.']};

